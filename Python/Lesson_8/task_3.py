# 3. Создайте собственный класс-исключение, который должен проверять содержимое
# списка на наличие только чисел. Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
# и вносить его в список, только если введено число. Класс-исключение должен не позволить
# пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
class MyError_not_num(Exception):
    def __init__(self, txt):
        self.txt = txt


def check_numbers(str_):
    if str_ == 'q':
        return False
    for el in str_:
        if ord(el) < 45 or ord(el) > 57 or ord(el) == 47:  # 45 '-'  46 '.'  48-57 '0-9'  47 '/'
            raise MyError_not_num("Введенные значения не числа\n"
                                  "Попробуйте еще раз")
        else:
            return True


check = True
list_ = []
while check:
    try:
        number = input("Введите число, для завершения введите 'q'\n")
        if check_numbers(number):
            list_.append(number)
        else:
            check = False
    except MyError_not_num as err:
        print(err)

for item in list_:
    print(f"{item} ", end="")
